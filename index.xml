<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Wsl Blog</title>
    <link>https://zwilder.github.io/posts/</link>
    <description>Adventures in making, arting, exploring, and other things.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 16 Feb 2024 11:00:00 -0700</lastBuildDate>
    
        <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    
    
    <item>
      <title>Solitaire Fun</title>
      <link>https://zwilder.github.io/posts/2024-2-17-cards/</link>
      <pubDate>Fri, 16 Feb 2024 11:00:00 -0700</pubDate>
      <author>Zach Wilder</author>
      
      <guid>/posts/2024-2-17-cards/</guid>
      <description>Way back in 2022 I started reading about using terminal escape codes to do away with depending on NCurses for all the terminal drawing and keyboard handling for terminal applications. If I recall correctly, my original motivation was because I wanted to use fancy unicode characters with the Goblin Caves project, and NCurses was not playing nicely.
Of course, I couldn&amp;rsquo;t just dive right into swapping over the entirety of Goblin Caves to using terminal codes directly without testing them on something - and the first thing I thought of was why not make a simulation of a deck of cards? I messed around, designed a way overbuilt deck of cards, and even started working on implementing a Cribbage game (ambitious!). I ran into a weird problem with Cribbage, couldn&amp;rsquo;t figure it out, and shelved the project. Some screenshots of the original project:
        Well, when I recently started working on Goblin Caves again I remembered my efforts to write some simple drawing and event handling code, brought that code over to the Goblin Caves project, buffed it up, and it worked great. - &lt;a href="https://zwilder.github.io/posts/2024-2-17-cards/"&gt;[Read more]&lt;/a&gt;</description>
    </item>
    
    <item>
      <title>Mieke, Part 1</title>
      <link>https://zwilder.github.io/posts/2023-12-16-mieke/</link>
      <pubDate>Fri, 15 Dec 2023 11:00:00 -0700</pubDate>
      <author>Zach Wilder</author>
      
      <guid>/posts/2023-12-16-mieke/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s hard to tell stories about someone who means so much to you, who has left a
massive mark on your life, and whose presence will be missed more than I can
possibly describe. I decided the best way was to just start at the beginning,
and write stories as I thought of them. This is the first in a series of posts
about Mieke, starting at the beginning and roughly chronicling the past 13
years.&lt;/p&gt; - &lt;a href="https://zwilder.github.io/posts/2023-12-16-mieke/"&gt;[Read more]&lt;/a&gt;</description>
    </item>
    
    <item>
      <title>Procedural Mushrooms and Random Names</title>
      <link>https://zwilder.github.io/posts/2023-11-27-random-names/</link>
      <pubDate>Mon, 27 Nov 2023 11:00:00 -0700</pubDate>
      <author>Zach Wilder</author>
      
      <guid>/posts/2023-11-27-random-names/</guid>
      <description>&lt;p&gt;The holidays are always a great time to slack off and work on fun projects -
while eating too much pie and wearing sweatpants for multiple days, of course.
Over the past week or so I&amp;rsquo;ve made a few neat things and more importantly
tied the Markov chain word generator into the Goblin Caves project.&lt;/p&gt;
&lt;p&gt;The first little thing I made is a procedural mushroom generator.&lt;/p&gt; - &lt;a href="https://zwilder.github.io/posts/2023-11-27-random-names/"&gt;[Read more]&lt;/a&gt;</description>
    </item>
    
    <item>
      <title>Markov Chain Word Generator</title>
      <link>https://zwilder.github.io/posts/2023-11-17-markov/</link>
      <pubDate>Fri, 17 Nov 2023 11:00:00 -0700</pubDate>
      <author>Zach Wilder</author>
      
      <guid>/posts/2023-11-17-markov/</guid>
      <description>The first screen the player sees in Goblin Caves is a black screen with a question and a prompt.
    This &amp;ldquo;new player&amp;rdquo; screen was originally made as a &amp;ldquo;quick and dirty&amp;rdquo; sort of thing, with the intention of replacing it with something fancier - or at least more flashy. It&amp;rsquo;s really grown on me since I originally wrote it, and I don&amp;rsquo;t think I&amp;rsquo;m going to change it. What does still bother me though, is that if you just hit enter without putting down something a little message box pops up, asking you to &amp;ldquo;Please try again.&amp;rdquo;
    That&amp;rsquo;s kinda lame, and directly above the code that does that error checking (was) a comment I wrote to myself: &amp;ldquo;It would be super cool if this was replaced with a call to a random name generator&amp;hellip;&amp;rdquo;
Well I came across that comment while rewriting all the drawing and input handling code, and decided that was going to be my next project. - &lt;a href="https://zwilder.github.io/posts/2023-11-17-markov/"&gt;[Read more]&lt;/a&gt;</description>
    </item>
    
    <item>
      <title>Goblin Caves</title>
      <link>https://zwilder.github.io/posts/2023-11-04-goblins/</link>
      <pubDate>Sat, 04 Nov 2023 11:00:00 -0700</pubDate>
      <author>Zach Wilder</author>
      
      <guid>/posts/2023-11-04-goblins/</guid>
      <description>&lt;p&gt;As a kid, I wanted to learn how to program to make computer games. That was the
original goal, anyways. I&amp;rsquo;ve always felt there is a weird sort of magic being
able to type structured sentences into a text file, ram it through a compiler
(sometimes with fun, cryptic looking incantations typed into the terminal), and
seeing something come to life on the other end.&lt;/p&gt;
&lt;p&gt;Programming has always been an on again/off again sort of hobby. I think it&amp;rsquo;s
more the act of making something from nothing that draws me to it then actually
making something. A few years ago (actually closer to a decade, somehow) I found
the &lt;a href=&#34;https://www.roguebasin.com/index.php/Complete_Roguelike_Tutorial,_using_python%2Blibtcod&#34;&gt;Complete Roguelike
Tutorial&lt;/a&gt;
using Python and libtcod. I didn&amp;rsquo;t know Python when I started the tutorial, but
the end result of that project was amazing - I had a mostly complete game. I
tweaked and customized, modified and played around with that project for a
while. Eventually hit a wall, probably due to my lack of knowledge with Python.&lt;/p&gt; - &lt;a href="https://zwilder.github.io/posts/2023-11-04-goblins/"&gt;[Read more]&lt;/a&gt;</description>
    </item>
    
    <item>
      <title>Techno-Necromancy</title>
      <link>https://zwilder.github.io/posts/2023-10-23-necromancy/</link>
      <pubDate>Mon, 23 Oct 2023 14:00:00 -0700</pubDate>
      <author>Zach Wilder</author>
      
      <guid>/posts/2023-10-23-necromancy/</guid>
      <description>&lt;p&gt;Well, my ambition to change the blog to a collection of posts about what I&amp;rsquo;m
currently doing apparently didn&amp;rsquo;t pan out for me posting more often. Time to
bring the blog back from the dead - some techno-necromancy.&lt;/p&gt;
&lt;p&gt;What&amp;rsquo;s happened in the three years and change since the last post? A lot,
actually. Ignoring the political landscape and all the nonsense from the COVID
times is hard, and probably why I didn&amp;rsquo;t feel motivated to write anything about
what I was doing with my personal life.&lt;/p&gt;
&lt;p&gt;In 2020, my family and I relocated to small town coastal Oregon from the
sprawling metropolis of Phoenix, AZ. Work had an opportunity, I took a leap. The
Oregon coast is absolutely gorgeous - but we &lt;strong&gt;very&lt;/strong&gt; quickly learned that it is
much nicer to visit (briefly) than to live. Work was challenging in many new and
unexpected ways (there&amp;rsquo;s too many trees here!). The three of us struggled to
adapt, and probably due to our stubborness we made it work.&lt;/p&gt;
&lt;p&gt;Surrounded by the beauty of the coast, we tried to make the most out of living
there. On our 45 minute drives every week to the grocery store we&amp;rsquo;d pass dozens
of new and exciting hiking trails - so we spent a lot of time hiking and
exploring. We acquired a canoe, and took that out whenever we could.&lt;/p&gt; - &lt;a href="https://zwilder.github.io/posts/2023-10-23-necromancy/"&gt;[Read more]&lt;/a&gt;</description>
    </item>
    
    <item>
      <title>Building a Daypack Ramblings</title>
      <link>https://zwilder.github.io/posts/2020-09-12-18lpack/</link>
      <pubDate>Sat, 12 Sep 2020 07:00:00 -0700</pubDate>
      <author>Zach Wilder</author>
      
      <media:content url="https://zwilder.github.io/images/2020-09-12-18LPack/WearingThePack.jpg" medium="image" />
      <image>
          <url>https://zwilder.github.io/images/2020-09-12-18LPack/WearingThePack.jpg</url>
          <title>Building a Daypack Ramblings Thumbnail</title>
          <link>https://zwilder.github.io/</link>
      </image>
      
      <guid>/posts/2020-09-12-18lpack/</guid>
      <description>Occasionally, I get ideas that creep into my brain and won&amp;rsquo;t leave until I fully explore them. Back in February, while still enjoying the nice Arizona winters, I was hiking with my trusty old camelback. I&amp;rsquo;m fond of that pack, despite it&amp;rsquo;s many shortcomings. It has lots of fun places to attach things, and carries around 2L of water. It has zero storage capacity, although you can shove like maybe a protein bar in with the bladder&amp;hellip; but that&amp;rsquo;s it. So, if I want to bring my sketchbook, I usually shove the camelback in my larger Osprey daypack. The Osprey is a nice pack, lots of little pockets, but it&amp;rsquo;s aesthetically pleasing curves really limit what I can easily pack in there. I also use the Osprey for carrying (awkwardly) all my plein air painting gear - which, shouldnt take up all that much space but really stretches the limit for how much the Osprey can hold. - &lt;a href="https://zwilder.github.io/posts/2020-09-12-18lpack/"&gt;[Read more]&lt;/a&gt;</description>
    </item>
    
    <item>
      <title>Reviving the Blog</title>
      <link>https://zwilder.github.io/posts/2020-06-06-revivingtheblog/</link>
      <pubDate>Sat, 06 Jun 2020 07:00:00 -0700</pubDate>
      <author>Zach Wilder</author>
      
      <media:content url="https://zwilder.github.io/images/2020-06-06-RevivingTheBlog/TrailerSketching_w.jpg" medium="image" />
      <image>
          <url>https://zwilder.github.io/images/2020-06-06-RevivingTheBlog/TrailerSketching_w.jpg</url>
          <title>Reviving the Blog Thumbnail</title>
          <link>https://zwilder.github.io/</link>
      </image>
      
      <guid>/posts/2020-06-06-revivingtheblog/</guid>
      <description>At the time of writing this, I&amp;rsquo;m sitting in a small camper trailer just off the Pacific ocean in Oregon. Rain is drizzling down in intermittent bursts, pounding on the metal roof, and when the rain stops a jay outside starts &amp;ldquo;singing&amp;rdquo; his boisterous song.
I&amp;rsquo;ve recently relocated to the Pacific Northwest - my job had a position that needed filling on the Oregon Coast, how could I turn down that opportunity? With little time to prepare, my wife and I packed and shoved things into shipping containers to migrate our life across the country and put our house up for sale. I started work in OR on May 3rd, flying out ahead of my wife and daughter to scope the place out and look for a new place to live. The house in AZ is currently under contract, and set to close on June 15th&amp;hellip; So I&amp;rsquo;ve been living in this trailer in the woods by myself for the last month. - &lt;a href="https://zwilder.github.io/posts/2020-06-06-revivingtheblog/"&gt;[Read more]&lt;/a&gt;</description>
    </item>
    
    <item>
      <title>*Sersia lancea* African Sumac</title>
      <link>https://zwilder.github.io/posts/2019-08-02-africansumac/</link>
      <pubDate>Fri, 02 Aug 2019 07:00:00 -0700</pubDate>
      <author>Zach Wilder</author>
      
      <media:content url="https://zwilder.github.io/images/2019-08-02-AfricanSumac/GlamourShot6.jpg" medium="image" />
      <image>
          <url>https://zwilder.github.io/images/2019-08-02-AfricanSumac/GlamourShot6.jpg</url>
          <title>*Sersia lancea* African Sumac Thumbnail</title>
          <link>https://zwilder.github.io/</link>
      </image>
      
      <guid>/posts/2019-08-02-africansumac/</guid>
      <description>Background Sersia lancea, the African sumac, is a common tree around the valley - the strong fragrance of its diminuitive flowers remind me strongly of spring time as a kid growing up in Phoenix. The tree is relatively unassuming, no showy flowers in the spring and no vibrant colours in the fall. Like most invading trees, it was originally brought to the valley in the 60s as a landscape tree. I&amp;rsquo;d venture to guess that most homes built in the 60s and early 70s had an African sumac planted prominently in the front yard or back yard.
As can probably be deducted from the common name, it is one of the most common trees in South Africa. In the native range, livestock that graze too heavily on the leaves will develop a foul taste in their milk. The bark, leaves, and twigs provided indigenous groups with a valuable source of tannin for leather making. - &lt;a href="https://zwilder.github.io/posts/2019-08-02-africansumac/"&gt;[Read more]&lt;/a&gt;</description>
    </item>
    
    <item>
      <title>The Shed</title>
      <link>https://zwilder.github.io/posts/2019-07-26-theshed/</link>
      <pubDate>Fri, 26 Jul 2019 08:00:00 -0700</pubDate>
      <author>Zach Wilder</author>
      
      <guid>/posts/2019-07-26-theshed/</guid>
      <description>Since this blog now exists I thought I would share one of my favorite old stories, and possibly one of the stranger encounters I&amp;rsquo;ve had. A good alternative title for this story would be &amp;ldquo;Out of the hole and facing rebirth&amp;rdquo;&amp;hellip;
One of my favorite things about this job is completing service requests - these are generally requests from people who actually want to see us. A nice change of pace from being the bearer of usually unpleasant news. Most of these requests are pretty routine - &amp;ldquo;person concerned about tree in proximity to power lines&amp;rdquo; is by far the most common. On this particular request, a neighbor was concerned about a property behind hers with a large tree growing into high voltage lines. Nothing strange, but not on her property. I called the person who made the request before heading out to see if I could get some more details and get access to her yard to see things from her vantage point. - &lt;a href="https://zwilder.github.io/posts/2019-07-26-theshed/"&gt;[Read more]&lt;/a&gt;</description>
    </item>
    
    <item>
      <title>*Ailanthus altissima* tree of heaven</title>
      <link>https://zwilder.github.io/posts/2019-07-21-ailanthus/</link>
      <pubDate>Sun, 21 Jul 2019 08:00:00 -0700</pubDate>
      <author>Jennifer Brady</author>
      
      <media:content url="https://zwilder.github.io/images/2019-07-21-Ailanthus/GlamourShot1.jpg" medium="image" />
      <image>
          <url>https://zwilder.github.io/images/2019-07-21-Ailanthus/GlamourShot1.jpg</url>
          <title>*Ailanthus altissima* tree of heaven Thumbnail</title>
          <link>https://zwilder.github.io/</link>
      </image>
      
      <guid>/posts/2019-07-21-ailanthus/</guid>
      <description>Background Ailanthus, tree of heaven, paradise tree, or tree of hell (as many like to call it) is an invasive tree across the United States, Canada, and Mexico. First introduced as an ornamental in the Eastern US and brought to California during the gold rush. This tree is common in urban areas and very tolerant of pollution and poor soil conditions. You can see tree of heaven in many mining towns in Arizona, some say it is holding up the old copper mining town of Jerome.
  In Phoenix I&amp;rsquo;ve come across ailanthus in older neighborhoods and I can see its invasive nature by the numerous amount of small trees and sprouts surrounding the larger trees. Tree of heaven is dioecious (trees are either male or female), the male flowers have a very offensive odor. Crushed leaflets smell like peanuts to some.
  The numerous seeds produced by ailanthus are only viable for 1 year and they spread by wind, water, birds, and humans. - &lt;a href="https://zwilder.github.io/posts/2019-07-21-ailanthus/"&gt;[Read more]&lt;/a&gt;</description>
    </item>
    
    <item>
      <title>*Leucaena leucocephala* Lead Tree</title>
      <link>https://zwilder.github.io/posts/2019-07-19-leadtree/</link>
      <pubDate>Fri, 19 Jul 2019 08:00:00 -0700</pubDate>
      <author>Zach Wilder</author>
      
      <media:content url="https://zwilder.github.io/images/2019-07-19-LeadTree/GlamourShot2.jpg" medium="image" />
      <image>
          <url>https://zwilder.github.io/images/2019-07-19-LeadTree/GlamourShot2.jpg</url>
          <title>*Leucaena leucocephala* Lead Tree Thumbnail</title>
          <link>https://zwilder.github.io/</link>
      </image>
      
      <guid>/posts/2019-07-19-leadtree/</guid>
      <description>Background Lead tree, river tamarind, faux mimosa - Travel through just about any alleyway in the Phoenix metro area and you are sure to come across this tree. It will usually be loaded with reddish, thin seedpods and likely have many small lead trees around it. Native to southern Mexico, it was originally planted as an ornamental here during the 1970s and 1980s. Supposedly, the tree was promoted as a &amp;ldquo;miracle tree&amp;rdquo; with many uses for the pods and wood. The bark (like many trees) was used in folk medicine to help relieve pain. Some Asian countries (particularly Laos and Indonesia) imported it and incorporated its prolific seed pods into various food dishes. The pods have also been used as a high protein animal fodder - until it became known that it causes hair loss in donkeys and horses.
  The trees grow unbelievably fast and spread quickly - trees less than a year old can produce copious amounts of viable seedpods that will grow wherever they touch soil. - &lt;a href="https://zwilder.github.io/posts/2019-07-19-leadtree/"&gt;[Read more]&lt;/a&gt;</description>
    </item>
    
    <item>
      <title>Explosions in the Dungeon</title>
      <link>https://zwilder.github.io/posts/2018-09-18-explosions/</link>
      <pubDate>Tue, 18 Sep 2018 14:00:00 -0700</pubDate>
      <author>Zach Wilder</author>
      
      <guid>/posts/2018-09-18-explosions/</guid>
      <description>One of the big goals for Barbarian and one of the coolest things on my to do list was to add animations into the game. How exciting is it to see an arrow flying toward your character, a firebolt explode in the face of an undead horde, blood splatter flying from the wounds inflicted by the mighty barbarian decorating the walls of the dungeon?
Obviously, the excitement added by all these visual effects is well worth the time spent adding them in. I started thinking about how I wanted to incorporate animations during the Tutorial Tuesday Challenge, and started jotting implementation ideas down in my notebook almost two months ago. For the life of me I could not find a good writeup on creating procedural explosions on a 2d grid, and could not wrap my head around how to make them look decent. I shared my struggles on the r/roguelikedev sharing Saturday post, and another dev (u/darkgnostic) gave me some fantastic ideas about reusing my line-of-sight code. - &lt;a href="https://zwilder.github.io/posts/2018-09-18-explosions/"&gt;[Read more]&lt;/a&gt;</description>
    </item>
    
    <item>
      <title>Wonderful Lists</title>
      <link>https://zwilder.github.io/posts/2018-08-26-lists/</link>
      <pubDate>Sun, 26 Aug 2018 15:00:00 -0700</pubDate>
      <author>Zach Wilder</author>
      
      <guid>/posts/2018-08-26-lists/</guid>
      <description>Over the course of the 2018 r/roguelikedev Tutorial Tuesday Challenge I decided to invest some time learning some fundamental programming concepts that I probably should have learned years ago. The fun (and challenging) part of being a hobby programmer is that most of my learning comes from books, and then random tutorials on the internet. Somewhere in the course of my &amp;ldquo;education&amp;rdquo; I never learned about basic data structures and how they can be used.
Around week three of the challenge I decided to implement a scheduling system for Barbarian - which led me to learn about creating lists and priority queues. STL has std::priority_queue, but like many STL classes never seems to want to play nicely with my code. Again, likely a byproduct of me learning C++ from a book and probably not the fault of STL.
This is my very first attempt at writing a tutorial - expect some errors and feel free to comment with any corrections. - &lt;a href="https://zwilder.github.io/posts/2018-08-26-lists/"&gt;[Read more]&lt;/a&gt;</description>
    </item>
    
    <item>
      <title>The Roguelike Tutorial - Week 7</title>
      <link>https://zwilder.github.io/posts/2018-08-09-the-rogueliketutorial-week7/</link>
      <pubDate>Thu, 09 Aug 2018 13:00:00 -0700</pubDate>
      <author>Zach Wilder</author>
      
      <guid>/posts/2018-08-09-the-rogueliketutorial-week7/</guid>
      <description>I didn&amp;rsquo;t do a lot of coding over the last week, but I did finish the challenge! Had a bit of a scare after finishing part 12, I found a horrible lurking bug in the program that caused a LOT of little errors and I wasn&amp;rsquo;t sure (at first) how to track it down. Basically, shortly after finishing adding in some cool randomization functions I found that some entities weren&amp;rsquo;t being copied correctly, or saved correctly. Turns out, the C++ Rule of 3/5/0 is actually a rule and not just a suggestion/guideline.
This project was the first time I attempted to use smart pointers and write more &amp;ldquo;correct&amp;rdquo; C++ code, and apparently even when using smart pointers to allocate memory you should write at least a copy constructor and copy assignment function. I&amp;rsquo;m still not sure what I would put in a custom destructor if all the memory that&amp;rsquo;s allocated is done via smart pointers, and that might be something I need to clean up now the challenge is over. - &lt;a href="https://zwilder.github.io/posts/2018-08-09-the-rogueliketutorial-week7/"&gt;[Read more]&lt;/a&gt;</description>
    </item>
    
    <item>
      <title>The Roguelike Tutorial - Week 5b/6</title>
      <link>https://zwilder.github.io/posts/2018-07-31-the-roguelike-tutorial-week5b6/</link>
      <pubDate>Tue, 31 Jul 2018 13:00:00 -0700</pubDate>
      <author>Zach Wilder</author>
      
      <guid>/posts/2018-07-31-the-roguelike-tutorial-week5b6/</guid>
      <description>Oh man, this has been a super exciting and productive week - this project is starting to feel like a real game! Started off last week a bit behind schedule, having just finished part 8. After my rant last week about my source code files getting too long, I decided to spend a bit of time going back over my core classes and cleaning up the code. I also split Engine into multiple files - which ended up making a lot of things a lot easier. Heck, recompiling a huge source file each time I make a minor change was tedious, and the time savings alone was worth splitting the files. Each of the Engine main functions now has it’s own file, and then each of those main functions calls separate routines depending on what GameState the game is in. Each of those separate, state specific functions has its own file. - &lt;a href="https://zwilder.github.io/posts/2018-07-31-the-roguelike-tutorial-week5b6/"&gt;[Read more]&lt;/a&gt;</description>
    </item>
    
    <item>
      <title>The Roguelike Tutorial - Week 5a</title>
      <link>https://zwilder.github.io/posts/2018-07-24-the-roguelike-tutorial-week5a/</link>
      <pubDate>Tue, 24 Jul 2018 16:00:00 -0700</pubDate>
      <author>Zach Wilder</author>
      
      <guid>/posts/2018-07-24-the-roguelike-tutorial-week5a/</guid>
      <description>Another very productive week for this project! Although I was unable to finish last weeks goals of getting Parts 8 and 9 completed by today, I still feel pretty darn good about what I did accomplish. Besides, Parts 10, 11, and 12 are all fairly simple - heck the code is already in place, just needs to actually be used!
After finishing Part 7 last week I decided to try and fix/change a few things that have been bothering me. The square, 12x12 font, looked great for the map tiles but it was really ugly for text. I figured my alternatives were to either use two fonts (like a 6x12 for text and a 12x12 for map), or just use a different font altogether. All my years playing games in a terminal window pushed me to the second option - if it’s good enough for the best roguelikes, it’s good enough for me! - &lt;a href="https://zwilder.github.io/posts/2018-07-24-the-roguelike-tutorial-week5a/"&gt;[Read more]&lt;/a&gt;</description>
    </item>
    
    <item>
      <title>The Roguelike Tutorial - Week 4</title>
      <link>https://zwilder.github.io/posts/2018-07-18-the-roguelike-tutorial-week4/</link>
      <pubDate>Wed, 18 Jul 2018 12:00:00 -0700</pubDate>
      <author>Zach Wilder</author>
      
      <guid>/posts/2018-07-18-the-roguelike-tutorial-week4/</guid>
      <description>The past week has been equal parts frustration and excitement with this project. I ran into a pretty common design problem: entity components need to know about the rest of the game. Well, since each entity is just a collection of components it shouldn&amp;rsquo;t be difficult to pass a pointer to the game engine. Then, the components would have a pointer to the entity that &amp;ldquo;owns&amp;rdquo; it. Simple and clean&amp;hellip; or so I thought. This didn&amp;rsquo;t work, at all. Individual entities could access the engine just fine, but the components just could not access anything about their owner. Even trying to print the address of the owner caused the game to segfault and crash. GDB was no help, and I tried MANY things to get this to work.
I realized that I was bashing my head against this problem, and totally stumped, so I decided to work on something else. I changed the Engine&amp;rsquo;s entity list from a std::vector&amp;lt;Entity&amp;gt; to a wsl::DLList&amp;lt;Entity&amp;gt; (from the fancy list class I created last week). - &lt;a href="https://zwilder.github.io/posts/2018-07-18-the-roguelike-tutorial-week4/"&gt;[Read more]&lt;/a&gt;</description>
    </item>
    
    <item>
      <title>The Roguelike Tutorial - Week 3b</title>
      <link>https://zwilder.github.io/posts/2018-07-10-the-roguelike-tutorial-week3b/</link>
      <pubDate>Tue, 10 Jul 2018 22:31:00 -0700</pubDate>
      <author>Zach Wilder</author>
      
      <guid>/posts/2018-07-10-the-roguelike-tutorial-week3b/</guid>
      <description>I originally planned for this week&amp;rsquo;s blog post to cover my adaptation of part 5 of the Python RL tutorial - but after finishing part 5 in a matter of minutes I realized there wouldn&amp;rsquo;t be much to write here! Part 5 is basically making new entities and getting the collision logic in place before combat is added in part 6. However, before adding combat I thought it would be beneficial to start thinking about game time - it&amp;rsquo;s far more fun when some enemies are a lot quicker than the player, forcing the player to devise strategies for survival.
Naturally, there&amp;rsquo;s a few articles on roguebasin - one of which I&amp;rsquo;ve read many times over the years, and never understood a word of it. Pascal is a goofy, blunt looking language and really makes you appreciate how nice programming languages read these days. Or, maybe I&amp;rsquo;m just dense and don&amp;rsquo;t get it. - &lt;a href="https://zwilder.github.io/posts/2018-07-10-the-roguelike-tutorial-week3b/"&gt;[Read more]&lt;/a&gt;</description>
    </item>
    
    <item>
      <title>The Roguelike Tutorial - Week 3a</title>
      <link>https://zwilder.github.io/posts/2018-07-02-the-roguelike-tutorial-week3/</link>
      <pubDate>Mon, 02 Jul 2018 08:00:00 -0700</pubDate>
      <author>Zach Wilder</author>
      
      <guid>/posts/2018-07-02-the-roguelike-tutorial-week3/</guid>
      <description>I decided to split the third week into two separate posts so that I wouldn&amp;rsquo;t ramble on as long as last week. Over the past week I continued fighting the BSP dungeon generator I had attempted to write the week prior, and gave up again. I&amp;rsquo;ll probably revisit the dungeon generator later, and will definitely write something about whatever I end up doing. The artificial deadlines imposed by following along with the rest of r/roguelikedev really helps motivate me to call something &amp;ldquo;good enough&amp;rdquo; and move on&amp;hellip; Heck, I think I could be satisfied just tinkering with dungeon generators and never moving on to actually making this a playable game!
I did some reading on writing clean C++ by google, which prompted me to take another look at the code I&amp;rsquo;ve already written. The big thing I gleaned from the Google article was to avoid &amp;ldquo;in-lining&amp;rdquo; things in headers, and put most of the code in the implementation. - &lt;a href="https://zwilder.github.io/posts/2018-07-02-the-roguelike-tutorial-week3/"&gt;[Read more]&lt;/a&gt;</description>
    </item>
    
    <item>
      <title>The Roguelike Tutorial - Week 2</title>
      <link>https://zwilder.github.io/posts/2018-06-25-the-roguelike-tutorial-week2/</link>
      <pubDate>Mon, 25 Jun 2018 08:00:00 -0700</pubDate>
      <author>Zach Wilder</author>
      
      <guid>/posts/2018-06-25-the-roguelike-tutorial-week2/</guid>
      <description>So this week&amp;rsquo;s goal is to finish part 2 and part 3 of the tutorial - I worked ahead because I was excited to get this project going, which worked out well since shortly after finishing part 2 I switched to SDL from SFML and it gave me some time to work on this blog.
The Switch to SDL So the game logic is completely divorced from the rendering system - I don&amp;rsquo;t want to be tied into using a set framework if I want to change later, and I know for a fact from previous projects this will make save files much easier to generate. I briefly described last week that the game has a virtual console that is written to, and is read/translated into graphics to be displayed by SFML. Well, the console is a grid of say, 80x50 (960px x 600px). Each cell in the grid has a glyph that needs to be translated and rendered. - &lt;a href="https://zwilder.github.io/posts/2018-06-25-the-roguelike-tutorial-week2/"&gt;[Read more]&lt;/a&gt;</description>
    </item>
    
    <item>
      <title>The Roguelike Tutorial - Week 1</title>
      <link>https://zwilder.github.io/posts/2018-06-20-the-roguelike-tutorial-week1/</link>
      <pubDate>Wed, 20 Jun 2018 07:00:00 -0700</pubDate>
      <author>Zach Wilder</author>
      
      <guid>/posts/2018-06-20-the-roguelike-tutorial-week1/</guid>
      <description>Last year r/roguelikedev did a really cool thing with a weekly post where everyone followed along with a tutorial, shared ideas and problems, and motivated each other to actually finish a project. Well they&amp;rsquo;re doing it again this year, and with the announcement last week I decided to take a look at the new and improved, Python3 version of the tutorial.
For those not familiar with this famous tutorial - each part covers a small chunk of building a roguelike using simple language and easy to follow code. In just 13 parts you have a working roguelike to build off of and branch out from. A really, really cool idea. I did the old Python2 version a couple years back, and it blew my mind. After completing the last part I finally had made a game, and was pretty proud of the results. I didn&amp;rsquo;t know Python when I started, and hadn&amp;rsquo;t done any coding before beginning, but was able to follow along and even add my own stuff along the way. - &lt;a href="https://zwilder.github.io/posts/2018-06-20-the-roguelike-tutorial-week1/"&gt;[Read more]&lt;/a&gt;</description>
    </item>
    
    <item>
      <title>Messing With Web Design - Again</title>
      <link>https://zwilder.github.io/posts/2017-10-22-messing-with-web/</link>
      <pubDate>Sun, 22 Oct 2017 07:00:00 -0700</pubDate>
      <author>Zach Wilder</author>
      
      <guid>/posts/2017-10-22-messing-with-web/</guid>
      <description>Ok, so it turns out I still can&amp;rsquo;t stand using a premade theme. I decided to look again at Hugo themes, and found XMin. Clean, simple, and a good basic idea of what I wanted this blog to look like. Cracked open the source code and was playing around&amp;hellip; one thing led to another and this is what I ended up with.
Really enjoying working with Hugo - haven&amp;rsquo;t even played with any of the cool powerful features that it has, but I am very impressed with how easy it is to modify and change things. Everything is laid out in a good, logical sense which makes it much easier to customize and play around with things.
Things that still need work:
  I&amp;rsquo;m not sure about the monospace font for the titles and headers - I like it, but that doesn&amp;rsquo;t mean it looks good! Ha.
  The Tags page looks off. - &lt;a href="https://zwilder.github.io/posts/2017-10-22-messing-with-web/"&gt;[Read more]&lt;/a&gt;</description>
    </item>
    
    <item>
      <title>Yet Another Blog Attempt</title>
      <link>https://zwilder.github.io/posts/2017-10-15-yet-another-blog-attempt/</link>
      <pubDate>Mon, 16 Oct 2017 20:55:23 -0700</pubDate>
      <author>Zach Wilder</author>
      
      <guid>/posts/2017-10-15-yet-another-blog-attempt/</guid>
      <description>Man, I really don&amp;rsquo;t do a lot of work on this blog - maybe because I am not a web programmer but I can see when this blog does not look very good.
Well, I officially gave up on web design. Yep! Turns out, I should probably leave that to the professionals. Oh, and I also decided to heck with Jekyll. It was cool, and worked well - but searching for a premade Jekyll theme was a chore. Not to mention getting all the silly ruby nonsense to work. Even tried playing around with Ruby and seeing what all the fuss was about. No thanks.
Stumbled upon Hu(go) - another static blog generator. Well, Hu(go) is blazingly fast, and has a ton of cool features that you don&amp;rsquo;t have to even try hard to get to work. Not to mention the themes are easily searched through, easily switched, easily customized/expanded, and look darn good. - &lt;a href="https://zwilder.github.io/posts/2017-10-15-yet-another-blog-attempt/"&gt;[Read more]&lt;/a&gt;</description>
    </item>
    
    <item>
      <title>Gradients for Colors, and Actions for Actors</title>
      <link>https://zwilder.github.io/posts/2017-01-07-gradients-and-actions/</link>
      <pubDate>Sat, 07 Jan 2017 11:45:00 -0700</pubDate>
      <author>Zach Wilder</author>
      
      <guid>/posts/2017-01-07-gradients-and-actions/</guid>
      <description>Over the past couple of weeks I&amp;rsquo;ve been working on simplifying the code for my roguelike project - heavily inspired by one of my favorite books on my shelf, Game Programming Patterns.
I&amp;rsquo;ve seriously read this book cover to cover, multiple times - and every time find a new use for one of the &amp;lsquo;patterns&amp;rsquo; in it. I just discovered that the author&amp;rsquo;s blog has a bunch of good reads on it as well. One of the biggest problems I&amp;rsquo;ve had with the roguelike project was a simple way to issue commands (which should have been a clue) from the player to the character, and from the computer AI to the enemies.
The first chapter in the book, and this blog post had the answer - the &amp;lsquo;Command&amp;rsquo; pattern. I have no idea how I didn&amp;rsquo;t think of this sooner - basically, all the actions that an actor (player or enemy) can take are issued as &amp;lsquo;commands&amp;rsquo;. - &lt;a href="https://zwilder.github.io/posts/2017-01-07-gradients-and-actions/"&gt;[Read more]&lt;/a&gt;</description>
    </item>
    
    <item>
      <title>Randomly Generated Caves with Cellular Automata</title>
      <link>https://zwilder.github.io/posts/2016-12-20-automata-caves/</link>
      <pubDate>Thu, 22 Dec 2016 19:18:06 -0700</pubDate>
      <author>Zach Wilder</author>
      
      <guid>/posts/2016-12-20-automata-caves/</guid>
      <description>So, every time I get the urge to write a blog post about whatever random bit of code I&amp;rsquo;m writing - I look at the blog and think: &amp;ldquo;Hm, this is kinda ugly.&amp;rdquo; Then, I have to rewrite it until I&amp;rsquo;m mostly satisfied with how it looks.
Recently, I&amp;rsquo;ve been working on writing a nice little interface for handling menus and other parts of the UI for my roguelike project. Unfortunately, like the layout of this blog, I can&amp;rsquo;t seem to find a satisfactory &amp;lsquo;look and feel&amp;rsquo; - I think I&amp;rsquo;ve got a good start though.
While procrastinating working on that, I&amp;rsquo;ve spent a lot of time thinking about the map, and my ECS system. At the risk of prematurely optimizing code, it seems like an awful waste of space to make every tile an entity. Most of a tiles properties are simple boolean flags anyways, so why not make tiles just a bitflag and glyph to represent them? - &lt;a href="https://zwilder.github.io/posts/2016-12-20-automata-caves/"&gt;[Read more]&lt;/a&gt;</description>
    </item>
    
    <item>
      <title>Commenting System with Staticman!</title>
      <link>https://zwilder.github.io/posts/2016-11-15-commenting-system/</link>
      <pubDate>Tue, 15 Nov 2016 19:18:06 -0700</pubDate>
      <author>Zach Wilder</author>
      
      <guid>/posts/2016-11-15-commenting-system/</guid>
      <description>The one bad thing about hosting a static blog is that implementing comments means you:
 Outsource, letting some other site handle it (like Disqus) Come up with some sort of crazy contraption to force a comment system into a static blog Spend hours scouring the internet to see what other people have done.  Obviously, outsourcing wasn&amp;rsquo;t an option - Disqus looks nice and all, and I&amp;rsquo;m sure it would be fine for a lot of people, but it just wasn&amp;rsquo;t what I wanted. I like having full control of my data. My next idea was to find a free hosting site and write some crazy PHP and set up a SQL database to set up comments.
But this got me thinking - how did sites handle comments before all this dynamic content was commonplace? A careful google search led me to an amazing blog post by Eduardo Boucas on how he solved this exact problem. - &lt;a href="https://zwilder.github.io/posts/2016-11-15-commenting-system/"&gt;[Read more]&lt;/a&gt;</description>
    </item>
    
    <item>
      <title>Partying With Jekyll</title>
      <link>https://zwilder.github.io/posts/2016-11-12-partying-with-jekyll/</link>
      <pubDate>Sat, 12 Nov 2016 18:15:06 -0700</pubDate>
      <author>Zach Wilder</author>
      
      <guid>/posts/2016-11-12-partying-with-jekyll/</guid>
      <description>I&amp;rsquo;ve been wanting to fix this blog for a while now, and I decided in the process that I am awful at web design/programming. Haha, well, the first step to being kinda good at something is kinda sucking at something, right?
In my scouring of the internet I discovered that a lot of static blog sites used Jekyll to generate their site. At first, I figured it was nothing more than another insta-blog program where you just dump some content into a folder and it spits out a blog - but holy cow it is so much more than (and can be exactly) that. I&amp;rsquo;ve only scratched the surface of what it is capable of, since I don&amp;rsquo;t have many skills in the web developement category (yet).
I originally attempted to create my own Jekyll theme - and successfully recreated my original blog format. Unfortunately, I remembered (after spending a good deal of time working on it) that I didn&amp;rsquo;t really like the look/feel of my original blog - and trashed it. - &lt;a href="https://zwilder.github.io/posts/2016-11-12-partying-with-jekyll/"&gt;[Read more]&lt;/a&gt;</description>
    </item>
    
    <item>
      <title>Fun With Dijkstra Mapping</title>
      <link>https://zwilder.github.io/posts/2016-07-15-fun-with-dijkstra-mapping/</link>
      <pubDate>Fri, 15 Jul 2016 08:29:06 -0700</pubDate>
      <author>Zach Wilder</author>
      
      <guid>/posts/2016-07-15-fun-with-dijkstra-mapping/</guid>
      <description>Continuing in my never-ending project to make a &amp;ldquo;simple&amp;rdquo; roguelike in C++, I decided to tackle something I have never before tried: artificial intelligence. My first rough idea was to implement some sort of component-type system, and build the AI up like I built up entities. This turned out to be far too complicated, and even getting a monster to move randomly was a chore. Obviously, this wasn&amp;rsquo;t going to work.
After browsing /r/roguelikedev and RogueBasin I came across a few articles on &amp;ldquo;need driven AI&amp;rdquo; - an absurdly cool concept, and so (seemingly) simple to implement I wasn&amp;rsquo;t sure how I didn&amp;rsquo;t stumble across this earlier. Basically, creatures in the game assign a value to things they know about (treasure, the player, exits, other monsters they are friendly with, other monsters they are terrified of, etc. etc.) and make an &amp;lsquo;informed&amp;rsquo; decision about where to move next. A monster could desire killing the player over treasure, and would &amp;ldquo;decide&amp;rdquo; to move towards the player instead of a closer pile of gold. - &lt;a href="https://zwilder.github.io/posts/2016-07-15-fun-with-dijkstra-mapping/"&gt;[Read more]&lt;/a&gt;</description>
    </item>
    
  </channel>
</rss>
