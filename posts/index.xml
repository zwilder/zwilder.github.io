<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Wsl Blog</title>
    <link>/posts/</link>
    <description>Recent content in Posts on Wsl Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 17 Nov 2023 11:00:00 -0700</lastBuildDate>
    
	<atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Markov Chain Word Generator</title>
      <link>/posts/2023-11-18-markov/</link>
      <pubDate>Fri, 17 Nov 2023 11:00:00 -0700</pubDate>
      
      <guid>/posts/2023-11-18-markov/</guid>
      <description>The first screen the player sees in Goblin Caves is a black screen with a question and a prompt.
    This &amp;ldquo;new player&amp;rdquo; screen was originally made as a &amp;ldquo;quick and dirty&amp;rdquo; sort of thing, with the intention of replacing it with something fancier - or at least more flashy. It&amp;rsquo;s really grown on me since I originally wrote it, and I don&amp;rsquo;t think I&amp;rsquo;m going to change it. What does still bother me though, is that if you just hit enter without putting down something a little message box pops up, asking you to &amp;ldquo;Please try again.&amp;rdquo;
    That&amp;rsquo;s kinda lame, and directly above the code that does that error checking (was) a comment I wrote to myself: &amp;ldquo;It would be super cool if this was replaced with a call to a random name generator&amp;hellip;&amp;rdquo;
Well I came across that comment while rewriting all the drawing and input handling code, and decided that was going to be my next project.
Random words are typically not just random characters slapped together - that would just give words like:
 alxvik hhbatxr orikumo kxzzmk cafzrx jkiuvfm
 Not very satisfying, right? Are those names? Places? Plants? Weapons? Who knows. To get more satisfying words, a better approach is to use a Markov Chain - what Wikipedia defines cryptically as &amp;ldquo;a stochastic model describing a sequence of possible events in which the probability of each event depends only on the state attained in the previous event.&amp;rdquo;
That&amp;rsquo;s just a bunch of fancy words to say (in this context) that if you start with a sequence of letters, which next letter is most likely to occur?
If you know those probabilities, word generation becomes easy - start with a few letters, figure out what letter could come next, choose one of those letters and start the process over with that letter and the preceding letters. With any dataset input, the words that would be generated following these probabilities would (should) be very similar to the input. I could even take multiple datasets, generate some words, handpick words I like for another dataset, and then generate a whole bunch of words similar to the ones I like!</description>
    </item>
    
    <item>
      <title>Goblin Caves</title>
      <link>/posts/2023-11-04-goblins/</link>
      <pubDate>Sat, 04 Nov 2023 11:00:00 -0700</pubDate>
      
      <guid>/posts/2023-11-04-goblins/</guid>
      <description>&lt;p&gt;As a kid, I wanted to learn how to program to make computer games. That was the
original goal, anyways. I&amp;rsquo;ve always felt there is a weird sort of magic being
able to type structured sentences into a text file, ram it through a compiler
(sometimes with fun, cryptic looking incantations typed into the terminal), and
seeing something come to life on the other end.&lt;/p&gt;
&lt;p&gt;Programming has always been an on again/off again sort of hobby. I think it&amp;rsquo;s
more the act of making something from nothing that draws me to it then actually
making something. A few years ago (actually closer to a decade, somehow) I found
the &lt;a href=&#34;https://www.roguebasin.com/index.php/Complete_Roguelike_Tutorial,_using_python%2Blibtcod&#34;&gt;Complete Roguelike
Tutorial&lt;/a&gt;
using Python and libtcod. I didn&amp;rsquo;t know Python when I started the tutorial, but
the end result of that project was amazing - I had a mostly complete game. I
tweaked and customized, modified and played around with that project for a
while. Eventually hit a wall, probably due to my lack of knowledge with Python.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Techno-Necromancy</title>
      <link>/posts/2023-10-23-necromancy/</link>
      <pubDate>Mon, 23 Oct 2023 14:00:00 -0700</pubDate>
      
      <guid>/posts/2023-10-23-necromancy/</guid>
      <description>&lt;p&gt;Well, my ambition to change the blog to a collection of posts about what I&amp;rsquo;m
currently doing apparently didn&amp;rsquo;t pan out for me posting more often. Time to
bring the blog back from the dead - some techno-necromancy.&lt;/p&gt;
&lt;p&gt;What&amp;rsquo;s happened in the three years and change since the last post? A lot,
actually. Ignoring the political landscape and all the nonsense from the COVID
times is hard, and probably why I didn&amp;rsquo;t feel motivated to write anything about
what I was doing with my personal life.&lt;/p&gt;
&lt;p&gt;In 2020, my family and I relocated to small town coastal Oregon from the
sprawling metropolis of Phoenix, AZ. Work had an opportunity, I took a leap. The
Oregon coast is absolutely gorgeous - but we &lt;strong&gt;very&lt;/strong&gt; quickly learned that it is
much nicer to visit (briefly) than to live. Work was challenging in many new and
unexpected ways (there&amp;rsquo;s too many trees here!). The three of us struggled to
adapt, and probably due to our stubborness we made it work.&lt;/p&gt;
&lt;p&gt;Surrounded by the beauty of the coast, we tried to make the most out of living
there. On our 45 minute drives every week to the grocery store we&amp;rsquo;d pass dozens
of new and exciting hiking trails - so we spent a lot of time hiking and
exploring. We acquired a canoe, and took that out whenever we could.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Building a Daypack Ramblings</title>
      <link>/posts/2020-09-12-18lpack/</link>
      <pubDate>Sat, 12 Sep 2020 07:00:00 -0700</pubDate>
      
      <guid>/posts/2020-09-12-18lpack/</guid>
      <description>Occasionally, I get ideas that creep into my brain and won&amp;rsquo;t leave until I fully explore them. Back in February, while still enjoying the nice Arizona winters, I was hiking with my trusty old camelback. I&amp;rsquo;m fond of that pack, despite it&amp;rsquo;s many shortcomings. It has lots of fun places to attach things, and carries around 2L of water. It has zero storage capacity, although you can shove like maybe a protein bar in with the bladder&amp;hellip; but that&amp;rsquo;s it. So, if I want to bring my sketchbook, I usually shove the camelback in my larger Osprey daypack. The Osprey is a nice pack, lots of little pockets, but it&amp;rsquo;s aesthetically pleasing curves really limit what I can easily pack in there. I also use the Osprey for carrying (awkwardly) all my plein air painting gear - which, shouldnt take up all that much space but really stretches the limit for how much the Osprey can hold. Which, again, leaves room for maybe a protein bar.
      Snack capacity should be a very important part of backpack design considerations.
So the idea was born, could I design a small daypack that could carry a few snacks, sketching stuff, and my hydration bladder or all of my plein air painting stuff, tripod, and lunch?
One thing I noticed while making small practice packs for my daughter is that all the fun little pockets in commercial packs that are barely large enough for anything practical really eat into the total storage capacity - keeping a pack simple greatly increases it&amp;rsquo;s storage capacity, even if it technically has the same volume designation.
Also, while curves are pleasing, they really suck for packing things. With these ideas in mind I set out to make a prototype pack out of some cheap ripstop.
              Cool flap with zippered pocket, compression ties on the side to reduce size, daisy chains on back, drawstring collar&amp;hellip;Fancy right? Yeah too fancy&amp;hellip; but the size was right. The top flap was kinda wonky on the prototype, and honestly it was more of a hassle to deal with then it was worth.</description>
    </item>
    
    <item>
      <title>Reviving the Blog</title>
      <link>/posts/2020-06-06-revivingtheblog/</link>
      <pubDate>Sat, 06 Jun 2020 07:00:00 -0700</pubDate>
      
      <guid>/posts/2020-06-06-revivingtheblog/</guid>
      <description>At the time of writing this, I&amp;rsquo;m sitting in a small camper trailer just off the Pacific ocean in Oregon. Rain is drizzling down in intermittent bursts, pounding on the metal roof, and when the rain stops a jay outside starts &amp;ldquo;singing&amp;rdquo; his boisterous song.
I&amp;rsquo;ve recently relocated to the Pacific Northwest - my job had a position that needed filling on the Oregon Coast, how could I turn down that opportunity? With little time to prepare, my wife and I packed and shoved things into shipping containers to migrate our life across the country and put our house up for sale. I started work in OR on May 3rd, flying out ahead of my wife and daughter to scope the place out and look for a new place to live. The house in AZ is currently under contract, and set to close on June 15th&amp;hellip; So I&amp;rsquo;ve been living in this trailer in the woods by myself for the last month.
There really is no shortage of stuff to do up here - especially being on the coast and with the weather so dang nice compared to AZ. One of the projects lingering in my mind for the past year or so was starting a new blog. Something to encompass all my hobbies, adventures, short essays on nature things and random stories. Basically, a combination and condensation of my other blog projects along with other things that I haven&amp;rsquo;t really posted anywhere online.
A one-stop Zach shop.
So, what you&amp;rsquo;ll find here, in the previous posts, is things written by myself and a coworker on my old &amp;ldquo;Hidden Phoenix&amp;rdquo; blog, and all the posts from my programming blog. I&amp;rsquo;ll be posting new stories from Oregon here, and occasionally write-ups of things I find interesting. You&amp;rsquo;ll also be seeing posts featuring things I&amp;rsquo;ve made - sewing projects, MYOG camping stuff, art, etc.
 One thing that I&amp;rsquo;ve wanted to do for a while is sketch more. I want to get out and &amp;ldquo;art&amp;rdquo; more - no real excuses for not doing it. With all my free time over the last month, and the fact that a lot of places were shut down because of the health crisis, I ran out of bullshit excuses and got out and did it.</description>
    </item>
    
    <item>
      <title>*Sersia lancea* African Sumac</title>
      <link>/posts/2019-08-02-africansumac/</link>
      <pubDate>Fri, 02 Aug 2019 07:00:00 -0700</pubDate>
      
      <guid>/posts/2019-08-02-africansumac/</guid>
      <description>Background Sersia lancea, the African sumac, is a common tree around the valley - the strong fragrance of its diminuitive flowers remind me strongly of spring time as a kid growing up in Phoenix. The tree is relatively unassuming, no showy flowers in the spring and no vibrant colours in the fall. Like most invading trees, it was originally brought to the valley in the 60s as a landscape tree. I&amp;rsquo;d venture to guess that most homes built in the 60s and early 70s had an African sumac planted prominently in the front yard or back yard.
As can probably be deducted from the common name, it is one of the most common trees in South Africa. In the native range, livestock that graze too heavily on the leaves will develop a foul taste in their milk. The bark, leaves, and twigs provided indigenous groups with a valuable source of tannin for leather making. The sumac&amp;rsquo;s hard wood was used for making bows and weaponry, and also as fenceposts - and it&amp;rsquo;s easy to see why when looking at the long, slender water sprouts.
  The African sumac is in the Anarcadiacea family, which is the same family as cashews, mangos, pistachios, and poison ivy. I&amp;rsquo;ve read in various online sources hints that the peppercorns of the African sumac have been used as a spice, and even used as one of the main ingredients in a type of honey mead - although despite my best googling I was unable to find more information to back up this claim.
The African sumac&amp;rsquo;s botanical name, Sersia lancea, was formally Rhus lancea. Rhus is the latin word for sumac, and lancea was a type of spear used by Roman infantry - a reference to the shape of the leaflets. The tree was formally renamed to Sersia in the early 90s in honor of the botanist and author Paul B. Sears.
The tree is very easily propogated by the peppercorn-like seeds, which is a problem because birds love these seeds. So, naturally, in any area in Phoenix where there is water, you&amp;rsquo;ll see these trees sprout up.</description>
    </item>
    
    <item>
      <title>The Shed</title>
      <link>/posts/2019-07-26-theshed/</link>
      <pubDate>Fri, 26 Jul 2019 08:00:00 -0700</pubDate>
      
      <guid>/posts/2019-07-26-theshed/</guid>
      <description>Since this blog now exists I thought I would share one of my favorite old stories, and possibly one of the stranger encounters I&amp;rsquo;ve had. A good alternative title for this story would be &amp;ldquo;Out of the hole and facing rebirth&amp;rdquo;&amp;hellip;
One of my favorite things about this job is completing service requests - these are generally requests from people who actually want to see us. A nice change of pace from being the bearer of usually unpleasant news. Most of these requests are pretty routine - &amp;ldquo;person concerned about tree in proximity to power lines&amp;rdquo; is by far the most common. On this particular request, a neighbor was concerned about a property behind hers with a large tree growing into high voltage lines. Nothing strange, but not on her property. I called the person who made the request before heading out to see if I could get some more details and get access to her yard to see things from her vantage point. She agreed to meet and let me into her backyard, where I could access an easement and see the tree.
It was during monsoon season, the weather outside was nice and humid - the air still fresh from a recent rain, and the sky grey and overcast. The request was in one of my favorite central Phoenix neighborhoods with lots of dense old trees and flood irrigation. As soon as I pulled up in front of her property I could see the tree she was concerned about, a massive old female carob growing directly into the lines. I drove around to the other street to go talk to the property owners and schedule pruning access.
The property where the tree was located was entirely walled off, easily 10&amp;rsquo; tall wooden walls surrounding it. It looked vacant or abandoned. I couldn’t find a single access point to knock on the door, and my knocks and hollering at the front wall yielded nothing from the property - just confused looks from an elderly neighbor who was watering her plants next door.
I returned to the lady&amp;rsquo;s property who called the request, and decided to see if we had access to the tree through the easement.</description>
    </item>
    
    <item>
      <title>*Ailanthus altissima* tree of heaven</title>
      <link>/posts/2019-07-21-ailanthus/</link>
      <pubDate>Sun, 21 Jul 2019 08:00:00 -0700</pubDate>
      
      <guid>/posts/2019-07-21-ailanthus/</guid>
      <description>Background Ailanthus, tree of heaven, paradise tree, or tree of hell (as many like to call it) is an invasive tree across the United States, Canada, and Mexico. First introduced as an ornamental in the Eastern US and brought to California during the gold rush. This tree is common in urban areas and very tolerant of pollution and poor soil conditions. You can see tree of heaven in many mining towns in Arizona, some say it is holding up the old copper mining town of Jerome.
  In Phoenix I&amp;rsquo;ve come across ailanthus in older neighborhoods and I can see its invasive nature by the numerous amount of small trees and sprouts surrounding the larger trees. Tree of heaven is dioecious (trees are either male or female), the male flowers have a very offensive odor. Crushed leaflets smell like peanuts to some.
  The numerous seeds produced by ailanthus are only viable for 1 year and they spread by wind, water, birds, and humans. Established trees have long shallow lateral roots that sprout prolifically, often more so when the tree is disturbed. The sprouts grow very fast and have been recorded to grow 1&amp;rdquo; per day (Harlow, et al). Control is very difficult and usually a combination of cut stump treatment and foliar sprays are needed.
Identification Tree of heaven has large alternate compound leaves (1&amp;rsquo; to 3&amp;rsquo; long) with 11 to 41 alternating leaflets. Leaflets are lanceolate with a pointed tip and they have 1 to 5 teeth at the base, but the sides and tip of the leaflet margin are smooth. The fruit is a twisted samara 1 to 1 ½&amp;rdquo; long, with the seed in the center. The twigs are thick and younger stems have many lenticels (raised spots on stem or twig that act as a spore) on the reddish-brown stem. These thick twigs are usually how I spot a tree of heaven, and I look for the large shield-shaped leaf scar. The bark varies and can be smooth to riged, sometimes appearing gray with lighter colored stripes.</description>
    </item>
    
    <item>
      <title>*Leucaena leucocephala* Lead Tree</title>
      <link>/posts/2019-07-19-leadtree/</link>
      <pubDate>Fri, 19 Jul 2019 08:00:00 -0700</pubDate>
      
      <guid>/posts/2019-07-19-leadtree/</guid>
      <description>Background Lead tree, river tamarind, faux mimosa - Travel through just about any alleyway in the Phoenix metro area and you are sure to come across this tree. It will usually be loaded with reddish, thin seedpods and likely have many small lead trees around it. Native to southern Mexico, it was originally planted as an ornamental here during the 1970s and 1980s. Supposedly, the tree was promoted as a &amp;ldquo;miracle tree&amp;rdquo; with many uses for the pods and wood. The bark (like many trees) was used in folk medicine to help relieve pain. Some Asian countries (particularly Laos and Indonesia) imported it and incorporated its prolific seed pods into various food dishes. The pods have also been used as a high protein animal fodder - until it became known that it causes hair loss in donkeys and horses.
  The trees grow unbelievably fast and spread quickly - trees less than a year old can produce copious amounts of viable seedpods that will grow wherever they touch soil. An advantage to wandering alleyways is that we are given the opportunity to really watch plants grow. I took the following picture of a small bit of lead tree brush growing in a dirt alleyway around 20th St and Camelback during a routine patrol, and marked it for removal.
  Well, as it was a small bit of brush it was given low priority and not removed by tree crews when they came through the area. A few months later in response to a homeowner request, I found myself staring at a tree that looked familiar&amp;hellip; This was growth during a very hot and dry summer - March 26, 2017 to September 22, 2017.
  Look at that growth in six months! From barely taller than the cinderblock wall to reaching up and above the communication wires into the secondary power lines! The increase in diameter is significant as well - that&amp;rsquo;s easily an inch and a half of growth. And the canopy! Those two small little twigs flanking the main stem in the first picture became enormous!</description>
    </item>
    
    <item>
      <title>Explosions in the Dungeon</title>
      <link>/posts/2018-09-18-explosions/</link>
      <pubDate>Tue, 18 Sep 2018 14:00:00 -0700</pubDate>
      
      <guid>/posts/2018-09-18-explosions/</guid>
      <description>One of the big goals for Barbarian and one of the coolest things on my to do list was to add animations into the game. How exciting is it to see an arrow flying toward your character, a firebolt explode in the face of an undead horde, blood splatter flying from the wounds inflicted by the mighty barbarian decorating the walls of the dungeon?
Obviously, the excitement added by all these visual effects is well worth the time spent adding them in. I started thinking about how I wanted to incorporate animations during the Tutorial Tuesday Challenge, and started jotting implementation ideas down in my notebook almost two months ago. For the life of me I could not find a good writeup on creating procedural explosions on a 2d grid, and could not wrap my head around how to make them look decent. I shared my struggles on the r/roguelikedev sharing Saturday post, and another dev (u/darkgnostic) gave me some fantastic ideas about reusing my line-of-sight code. So, armed with this knowledge I sat down last week and decided to finally try some of my implementation ideas.
The idea was simple, for each frame expand outward from the origin of the explosion to a set radius.
The Framework In order to test this out, I needed to actually get the animations working. Like most bits of code that I only have a vague idea of how to accomplish I started at the top: Engine::update() and Engine::draw() should loop through a list of animations, updating and drawing them. Easy enough to draw them, just need an Animation::draw() routine. Update would be similar, but would need to know how much time had passed since the last update. To get this, I needed to visit the main loop code
 something that hasn&amp;rsquo;t been looked at in quite a while.  Cracked open main.cpp, dusted it off and examined my loop. Previously the game was limited to 60fps by using a call to sleep the thread - definitely gross and in need of some work. Where had I seen a beautiful, simple game loop before?</description>
    </item>
    
    <item>
      <title>Wonderful Lists</title>
      <link>/posts/2018-08-26-lists/</link>
      <pubDate>Sun, 26 Aug 2018 15:00:00 -0700</pubDate>
      
      <guid>/posts/2018-08-26-lists/</guid>
      <description>Over the course of the 2018 r/roguelikedev Tutorial Tuesday Challenge I decided to invest some time learning some fundamental programming concepts that I probably should have learned years ago. The fun (and challenging) part of being a hobby programmer is that most of my learning comes from books, and then random tutorials on the internet. Somewhere in the course of my &amp;ldquo;education&amp;rdquo; I never learned about basic data structures and how they can be used.
Around week three of the challenge I decided to implement a scheduling system for Barbarian - which led me to learn about creating lists and priority queues. STL has std::priority_queue, but like many STL classes never seems to want to play nicely with my code. Again, likely a byproduct of me learning C++ from a book and probably not the fault of STL.
This is my very first attempt at writing a tutorial - expect some errors and feel free to comment with any corrections. I will absolutely guarantee that there is probably a better way of doing what I&amp;rsquo;ve written here, so don&amp;rsquo;t read this as gospel.
Making a List A list is a fantastic data structure - and is so simple to implement I&amp;rsquo;m not sure why it was never included in the beginning programming books I have read. A list is an ordered collection of nodes, where each node has some data and a pointer to the next node. The list has a head and a tail - the very first and very last nodes in the list. That&amp;rsquo;s it! That&amp;rsquo;s all they are.
Head A ---&amp;gt; B ---&amp;gt; C &amp;lt;- Node 1 2 3 &amp;lt;- Data Tail Definining a node is simple, and using the power of C++ templates you can make a node hold any data you can imagine!
template &amp;lt;typename T&amp;gt; class Node { public: Node(T d) : data(d) { next = NULL; prev = NULL; } T data; Node * next; Node * prev; };  Then to create the list all we need is a couple of functions - one to add nodes and one to remove nodes.</description>
    </item>
    
    <item>
      <title>The Roguelike Tutorial - Week 7</title>
      <link>/posts/2018-08-09-the-rogueliketutorial-week7/</link>
      <pubDate>Thu, 09 Aug 2018 13:00:00 -0700</pubDate>
      
      <guid>/posts/2018-08-09-the-rogueliketutorial-week7/</guid>
      <description>I didn&amp;rsquo;t do a lot of coding over the last week, but I did finish the challenge! Had a bit of a scare after finishing part 12, I found a horrible lurking bug in the program that caused a LOT of little errors and I wasn&amp;rsquo;t sure (at first) how to track it down. Basically, shortly after finishing adding in some cool randomization functions I found that some entities weren&amp;rsquo;t being copied correctly, or saved correctly. Turns out, the C++ Rule of 3/5/0 is actually a rule and not just a suggestion/guideline.
This project was the first time I attempted to use smart pointers and write more &amp;ldquo;correct&amp;rdquo; C++ code, and apparently even when using smart pointers to allocate memory you should write at least a copy constructor and copy assignment function. I&amp;rsquo;m still not sure what I would put in a custom destructor if all the memory that&amp;rsquo;s allocated is done via smart pointers, and that might be something I need to clean up now the challenge is over.
When the Entity class was created with the default copy constructor (or copy assignment), it wasn&amp;rsquo;t allocating new memory for the new entity. So, when one entity was destroyed another entity would suddenly lose it&amp;rsquo;s components! This never was a problem before part 12, because I never tried to duplicate entities. One of the main goals in part 12 was to intelligently place monsters, and I implemented that with a weighted list that contained a prototype entity which was duplicated each time one of those enemies was placed. All of a sudden, enemies suddenly couldn&amp;rsquo;t die after the first one was killed. Pathfinding spontaneously broke. Entity names started being displayed as gibberish. I seriously thought I was going to have to scrap the project at this point, because I had no idea where to begin solving this problem. The answer eventually came to me at work, and getting everything smoothed out was pretty trivial.
Part 12 So the theme of part 12 was to start implementing more randomization functions. Up until this week I was using the built in STL version of mersenne twister, and I don&amp;rsquo;t think the way I was using it was the most effective or how it was designed to be used.</description>
    </item>
    
    <item>
      <title>The Roguelike Tutorial - Week 5b/6</title>
      <link>/posts/2018-07-31-the-roguelike-tutorial-week5b6/</link>
      <pubDate>Tue, 31 Jul 2018 13:00:00 -0700</pubDate>
      
      <guid>/posts/2018-07-31-the-roguelike-tutorial-week5b6/</guid>
      <description>Oh man, this has been a super exciting and productive week - this project is starting to feel like a real game! Started off last week a bit behind schedule, having just finished part 8. After my rant last week about my source code files getting too long, I decided to spend a bit of time going back over my core classes and cleaning up the code. I also split Engine into multiple files - which ended up making a lot of things a lot easier. Heck, recompiling a huge source file each time I make a minor change was tedious, and the time savings alone was worth splitting the files. Each of the Engine main functions now has it’s own file, and then each of those main functions calls separate routines depending on what GameState the game is in. Each of those separate, state specific functions has its own file. Code that’s reused between routines lives in the main function file.
I think it’s pretty cool - makes finding and changing things easier. I also noticed that this project is now more than twice the length (lines of code) of any project I’ve done so far. This weeks post was originally intended to cover just part 9, but I threw 10 and 11 in as well since they were relatively short.
Part 9 - Targeting I wasn’t sure when I started this part how I would go about doing it. Style-wise, I like the way ADOM and Angband handling targeting with the auto select target and keyboard interface. Using a mouse feels weird to me when playing roguelikes, so I knew I didn’t want to stick to the ideas in the Python tutorial. The game engine is already set up to handle different game states, but targeting isn’t really a state - more of a miniature loop with it’s own events and draw cycle.
So, I decided to make targeting exactly that - a game state that isn’t really a state, but a miniature replica of the main game loop. When a function (any function) calls Engine::target() the game saves the current state, and starts it’s own loop.</description>
    </item>
    
    <item>
      <title>The Roguelike Tutorial - Week 5a</title>
      <link>/posts/2018-07-24-the-roguelike-tutorial-week5a/</link>
      <pubDate>Tue, 24 Jul 2018 16:00:00 -0700</pubDate>
      
      <guid>/posts/2018-07-24-the-roguelike-tutorial-week5a/</guid>
      <description>Another very productive week for this project! Although I was unable to finish last weeks goals of getting Parts 8 and 9 completed by today, I still feel pretty darn good about what I did accomplish. Besides, Parts 10, 11, and 12 are all fairly simple - heck the code is already in place, just needs to actually be used!
After finishing Part 7 last week I decided to try and fix/change a few things that have been bothering me. The square, 12x12 font, looked great for the map tiles but it was really ugly for text. I figured my alternatives were to either use two fonts (like a 6x12 for text and a 12x12 for map), or just use a different font altogether. All my years playing games in a terminal window pushed me to the second option - if it’s good enough for the best roguelikes, it’s good enough for me! The only difficulty with this option is that if I ever want to add graphical tiles easily, I’d have to make the tiles in a strange size (ie 9x14 instead of 16x16). Adding graphical tiles in will be a chore anyways, so I’ll just go ahead and not worry about it now. This is what the game looks like now:
  Pretty slick! After changing to a nice 9x14 font, I decided to tackle another minor improvement that makes a huge impact: fullscreen mode! First, I had to set the game window to a standard resolution (800x600), and then center the console in that window. Easy enough. Conveniently SDL has a super cool built in function to turn on fullscreen! Oddly, it doesn’t work at all. Maybe a fault with my code, maybe a fault with SDL. Not sure, but google showed me that a bunch of people have the same issue - and very few people had work-arounds. The solution I chose to go with is to make the window a bit larger than the computer desktop resolution, and then center it. So, it’s very much a fake fullscreen, but it works and looks darn nice.</description>
    </item>
    
    <item>
      <title>The Roguelike Tutorial - Week 4</title>
      <link>/posts/2018-07-18-the-roguelike-tutorial-week4/</link>
      <pubDate>Wed, 18 Jul 2018 12:00:00 -0700</pubDate>
      
      <guid>/posts/2018-07-18-the-roguelike-tutorial-week4/</guid>
      <description>The past week has been equal parts frustration and excitement with this project. I ran into a pretty common design problem: entity components need to know about the rest of the game. Well, since each entity is just a collection of components it shouldn&amp;rsquo;t be difficult to pass a pointer to the game engine. Then, the components would have a pointer to the entity that &amp;ldquo;owns&amp;rdquo; it. Simple and clean&amp;hellip; or so I thought. This didn&amp;rsquo;t work, at all. Individual entities could access the engine just fine, but the components just could not access anything about their owner. Even trying to print the address of the owner caused the game to segfault and crash. GDB was no help, and I tried MANY things to get this to work.
I realized that I was bashing my head against this problem, and totally stumped, so I decided to work on something else. I changed the Engine&amp;rsquo;s entity list from a std::vector&amp;lt;Entity&amp;gt; to a wsl::DLList&amp;lt;Entity&amp;gt; (from the fancy list class I created last week). To my surprise and delight, it worked perfectly! What&amp;rsquo;s nice about using the list I created is that it manages it&amp;rsquo;s own memory - I don&amp;rsquo;t have to worry about allocations/deallocations no matter how big the list gets!
This got me thinking about best practices and clean code again. In general, I&amp;rsquo;ve heard you should always use the Standard Template Library containers over a custom rolled solution. However, I know my code, I know how it works, and I can fix/change it with minimal fuss. Creating a custom wrapper for std::priority_queue or std::map? No way, I have no idea where to even begin!
So, with this in mind I returned to my original problem. To hell with best practice, I&amp;rsquo;m not a professional and I don&amp;rsquo;t work with other programmers. My code is written clearly and commented well, so it should be easy to figure out why I did things the way I did. I decided that a good, bare bones, no frills system has components that are nothing more than data containers, and entities that are collections of components.</description>
    </item>
    
    <item>
      <title>The Roguelike Tutorial - Week 3b</title>
      <link>/posts/2018-07-10-the-roguelike-tutorial-week3b/</link>
      <pubDate>Tue, 10 Jul 2018 22:31:00 -0700</pubDate>
      
      <guid>/posts/2018-07-10-the-roguelike-tutorial-week3b/</guid>
      <description>I originally planned for this week&amp;rsquo;s blog post to cover my adaptation of part 5 of the Python RL tutorial - but after finishing part 5 in a matter of minutes I realized there wouldn&amp;rsquo;t be much to write here! Part 5 is basically making new entities and getting the collision logic in place before combat is added in part 6. However, before adding combat I thought it would be beneficial to start thinking about game time - it&amp;rsquo;s far more fun when some enemies are a lot quicker than the player, forcing the player to devise strategies for survival.
Naturally, there&amp;rsquo;s a few articles on roguebasin - one of which I&amp;rsquo;ve read many times over the years, and never understood a word of it. Pascal is a goofy, blunt looking language and really makes you appreciate how nice programming languages read these days. Or, maybe I&amp;rsquo;m just dense and don&amp;rsquo;t get it. I love that article though - not only because it references my favorite roguelike ADOM(which, despite playing for over a decade have never beat), but because of the word &amp;ldquo;elegant.&amp;rdquo; It just sounds so, appealing.
I sat down, notebook ready, to try and break this article in pieces and figure out what it&amp;rsquo;s saying. The very first thing it says is:
 Readers should be familiar with a linked list (next) and doubly-linked list (prev and next). A circular list simply means that the last object&amp;rsquo;s &amp;ldquo;next&amp;rdquo; points to the first object; and in a doubly-linked circular list the first object&amp;rsquo;s &amp;ldquo;prev&amp;rdquo; points to the last object. The advantage of a circular list over a regular list is that a circular list need not cater for null-references during insertion or deletion of objects.
 Well, my severe lack of formal computer science education meant that I had no idea what any of those things are, really, beyond the fact that they exist and there is likely an STL implementation of those I could find. Searching google for &amp;ldquo;linked list C++&amp;rdquo; led me to this fantastic site.
I decided to take a step back from this project at this point and learn all about lists.</description>
    </item>
    
    <item>
      <title>The Roguelike Tutorial - Week 3a</title>
      <link>/posts/2018-07-02-the-roguelike-tutorial-week3/</link>
      <pubDate>Mon, 02 Jul 2018 08:00:00 -0700</pubDate>
      
      <guid>/posts/2018-07-02-the-roguelike-tutorial-week3/</guid>
      <description>I decided to split the third week into two separate posts so that I wouldn&amp;rsquo;t ramble on as long as last week. Over the past week I continued fighting the BSP dungeon generator I had attempted to write the week prior, and gave up again. I&amp;rsquo;ll probably revisit the dungeon generator later, and will definitely write something about whatever I end up doing. The artificial deadlines imposed by following along with the rest of r/roguelikedev really helps motivate me to call something &amp;ldquo;good enough&amp;rdquo; and move on&amp;hellip; Heck, I think I could be satisfied just tinkering with dungeon generators and never moving on to actually making this a playable game!
I did some reading on writing clean C++ by google, which prompted me to take another look at the code I&amp;rsquo;ve already written. The big thing I gleaned from the Google article was to avoid &amp;ldquo;in-lining&amp;rdquo; things in headers, and put most of the code in the implementation. This is something I thought I did already, but apparently using non-trivial types inline in headers is bad for performance. This means stuff like this is OK:
class Foo { public: ... const int &amp;amp; count() { return count_; } ... private: int count_; };  However, doing this is not: class Bar { public: ... Foo badFunc() { return data_; } ... private: Foo data_; }; 
Along the same lines, Google recommends not to inline constructors/destructors with non-trivial types. This is something I did in almost every header file in the game! Fortunately, since this program is still relatively small, the changes to my code were easy enough to implement.
So the first challenge for this week was to implement a &amp;ldquo;field of view&amp;rdquo; for our dungeon delving barbarian. Two options I considered for this were following along with the original Rogue or using Bresenham&amp;rsquo;s line drawing algorithm. The original Rogue showed the entirety of whichever room the player was in, and kept track of explored areas. Field of view using line drawing basically illuminates a radius around the player, while intelligently stopping sight from passing through walls and other obstructions.</description>
    </item>
    
    <item>
      <title>The Roguelike Tutorial - Week 2</title>
      <link>/posts/2018-06-25-the-roguelike-tutorial-week2/</link>
      <pubDate>Mon, 25 Jun 2018 08:00:00 -0700</pubDate>
      
      <guid>/posts/2018-06-25-the-roguelike-tutorial-week2/</guid>
      <description>So this week&amp;rsquo;s goal is to finish part 2 and part 3 of the tutorial - I worked ahead because I was excited to get this project going, which worked out well since shortly after finishing part 2 I switched to SDL from SFML and it gave me some time to work on this blog.
The Switch to SDL So the game logic is completely divorced from the rendering system - I don&amp;rsquo;t want to be tied into using a set framework if I want to change later, and I know for a fact from previous projects this will make save files much easier to generate. I briefly described last week that the game has a virtual console that is written to, and is read/translated into graphics to be displayed by SFML. Well, the console is a grid of say, 80x50 (960px x 600px). Each cell in the grid has a glyph that needs to be translated and rendered. During engine initialization, it loads one texture (image) as the spritesheet - in this case it&amp;rsquo;s a .png image of the CP437 font.
  Now what Engine::Draw() did originally was make a new SFML sprite for each cell, with the position set to the font size multiplied by the cell x,y coordinates. Seemed simple enough, and it worked - but that&amp;rsquo;s 4000 sprites created and destroyed EVERY time Draw() is called. The next iteration created two arrays of sprites in Engine::Init() that were persistent and lived throughout the life of the program - one sprite for each cell in an array, and one for each glyph. Then, in draw, each cell&amp;rsquo;s sprite was just changed to be the same value as the sprite representing the glyph on the console. Yep, that worked too, but it still seemed there had to be a cleaner, better way of doing this.
I realized something shortly after finishing that, I don&amp;rsquo;t need all those sprites. I could just create an array of rectangles representing the sprite location on the texture and then change each cell&amp;rsquo;s sprite location in that array! Further, doing this I didn&amp;rsquo;t really need 4000 sprites (one for each cell) - couldn&amp;rsquo;t I just use one sprite, updating it&amp;rsquo;s position and rectangle before drawing it, since I only clear the render surface before drawing the first time?</description>
    </item>
    
    <item>
      <title>The Roguelike Tutorial - Week 1</title>
      <link>/posts/2018-06-20-the-roguelike-tutorial-week1/</link>
      <pubDate>Wed, 20 Jun 2018 07:00:00 -0700</pubDate>
      
      <guid>/posts/2018-06-20-the-roguelike-tutorial-week1/</guid>
      <description>Last year r/roguelikedev did a really cool thing with a weekly post where everyone followed along with a tutorial, shared ideas and problems, and motivated each other to actually finish a project. Well they&amp;rsquo;re doing it again this year, and with the announcement last week I decided to take a look at the new and improved, Python3 version of the tutorial.
For those not familiar with this famous tutorial - each part covers a small chunk of building a roguelike using simple language and easy to follow code. In just 13 parts you have a working roguelike to build off of and branch out from. A really, really cool idea. I did the old Python2 version a couple years back, and it blew my mind. After completing the last part I finally had made a game, and was pretty proud of the results. I didn&amp;rsquo;t know Python when I started, and hadn&amp;rsquo;t done any coding before beginning, but was able to follow along and even add my own stuff along the way. Eventually, my lack of knowledge caught up with me and my bloated single file Python program started to become difficult to modify and maintain. I took a step back, and decided to start relearning C and then ventured into C++.
I quickly found that I actually really enjoy more of the building of the game than the designing of the game. Which, is cool because the amount of things to build and the resources available for building things from scratch are darn near infinite - especially with the knowledge of the internet at my fingertips. It is not, however, conducive to finishing a project or making something playable.
As I read through the new and improved tutorial, I realized something pretty amazing: I could build this in C++. Reading each part I could think of ways (plural!) that I could accomplish the same thing, but with my own code. So, I decided to play along with the tutorial, and force myself to follow the deadlines - a week for each part.
I decided to start posting this to the blog after I had finished Parts 0 - 3, which covers weeks one and two - so I&amp;rsquo;ve written a brief summary of what I&amp;rsquo;ve done in parts 1 and 2 of the tutorial so far.</description>
    </item>
    
    <item>
      <title>Messing With Web Design - Again</title>
      <link>/posts/2017-10-22-messing-with-web/</link>
      <pubDate>Sun, 22 Oct 2017 07:00:00 -0700</pubDate>
      
      <guid>/posts/2017-10-22-messing-with-web/</guid>
      <description>Ok, so it turns out I still can&amp;rsquo;t stand using a premade theme. I decided to look again at Hugo themes, and found XMin. Clean, simple, and a good basic idea of what I wanted this blog to look like. Cracked open the source code and was playing around&amp;hellip; one thing led to another and this is what I ended up with.
Really enjoying working with Hugo - haven&amp;rsquo;t even played with any of the cool powerful features that it has, but I am very impressed with how easy it is to modify and change things. Everything is laid out in a good, logical sense which makes it much easier to customize and play around with things.
Things that still need work:
  I&amp;rsquo;m not sure about the monospace font for the titles and headers - I like it, but that doesn&amp;rsquo;t mean it looks good! Ha.
  The Tags page looks off. Not sure what to do with that.
  Maybe write some sort of intro thing for the home page.
  Most likely I&amp;rsquo;ll end up redoing this whole layout&amp;hellip; But this was the first time I&amp;rsquo;ve messed around with web design stuff and had a bit of success and didn&amp;rsquo;t pull out too many hairs! Thanks Hugo!</description>
    </item>
    
    <item>
      <title>Yet Another Blog Attempt</title>
      <link>/posts/2017-10-15-yet-another-blog-attempt/</link>
      <pubDate>Mon, 16 Oct 2017 20:55:23 -0700</pubDate>
      
      <guid>/posts/2017-10-15-yet-another-blog-attempt/</guid>
      <description>Man, I really don&amp;rsquo;t do a lot of work on this blog - maybe because I am not a web programmer but I can see when this blog does not look very good.
Well, I officially gave up on web design. Yep! Turns out, I should probably leave that to the professionals. Oh, and I also decided to heck with Jekyll. It was cool, and worked well - but searching for a premade Jekyll theme was a chore. Not to mention getting all the silly ruby nonsense to work. Even tried playing around with Ruby and seeing what all the fuss was about. No thanks.
Stumbled upon Hu(go) - another static blog generator. Well, Hu(go) is blazingly fast, and has a ton of cool features that you don&amp;rsquo;t have to even try hard to get to work. Not to mention the themes are easily searched through, easily switched, easily customized/expanded, and look darn good. So, for now, this is what the blog will look like - A theme called Hemmingway powered by Hugo. I also caved and signed up for Disqus, to handle comments. It really is so much easier using premade tools, haha.
&amp;ndash;
In other news, I continued the process of learning C++ by programming in C++ and made a bit of progress on my rougelike attempt. I had a revelation while working one day about how the &amp;ldquo;engine&amp;rdquo; should be structured: Everything manages its own shit and nothing else. No exceptions. But, you ask, how will my keypresses to move the player work? Wouldn&amp;rsquo;t the game engine have to interpret those key presses and then tell the game state to move the player, and then the player respond with&amp;hellip;
No. Doing that causes all sorts of crazy dependencies and connections that do not have to exist.
My solution?
  Engine manages a stack of states. It doesn&amp;rsquo;t really know what a state is, just that it has them, and that it can add states to itself and remove states from itself. The engine is responsible for interacting with the computer and reading user input.
  Each state manages a stack of windows.</description>
    </item>
    
    <item>
      <title>Gradients for Colors, and Actions for Actors</title>
      <link>/posts/2017-01-07-gradients-and-actions/</link>
      <pubDate>Sat, 07 Jan 2017 11:45:00 -0700</pubDate>
      
      <guid>/posts/2017-01-07-gradients-and-actions/</guid>
      <description>Over the past couple of weeks I&amp;rsquo;ve been working on simplifying the code for my roguelike project - heavily inspired by one of my favorite books on my shelf, Game Programming Patterns.
I&amp;rsquo;ve seriously read this book cover to cover, multiple times - and every time find a new use for one of the &amp;lsquo;patterns&amp;rsquo; in it. I just discovered that the author&amp;rsquo;s blog has a bunch of good reads on it as well. One of the biggest problems I&amp;rsquo;ve had with the roguelike project was a simple way to issue commands (which should have been a clue) from the player to the character, and from the computer AI to the enemies.
The first chapter in the book, and this blog post had the answer - the &amp;lsquo;Command&amp;rsquo; pattern. I have no idea how I didn&amp;rsquo;t think of this sooner - basically, all the actions that an actor (player or enemy) can take are issued as &amp;lsquo;commands&amp;rsquo;. A command is just a subclass of an action, and each actor when updating gets to call it&amp;rsquo;s most current action&amp;rsquo;s perform() routine. What makes this super cool and useful is that the perform routine returns an ActionResult, which has a flag stating whether or not the current action was successful, and a suggested alternate action (for use if the action was unsuccessful).
class Action { public: virtual ActionResult perform(Actor &amp;amp; actor) = 0; protected: Action() { } }; class ActionResult { public: ActionResult() { status_ = true; } bool success() { return status_; } void setFalse() { status_ = false; } void setTrue() { status_ = true; } Action * getAlternate() { return alternative_; } void setAlternate(Action * alternate) { alternative_ = alternate; } private: Action * alternative_; bool status_; };  Now, if the player moves into a square - instead of the keypress moving the player, the keypress just sets the player&amp;rsquo;s next action to attack in the direction of that tile. During the players update, the perform() for the attack action checks to see if there is another actor there - and if there isn&amp;rsquo;t returns a move action as an alternate.</description>
    </item>
    
    <item>
      <title>Randomly Generated Caves with Cellular Automata</title>
      <link>/posts/2016-12-20-automata-caves/</link>
      <pubDate>Thu, 22 Dec 2016 19:18:06 -0700</pubDate>
      
      <guid>/posts/2016-12-20-automata-caves/</guid>
      <description>So, every time I get the urge to write a blog post about whatever random bit of code I&amp;rsquo;m writing - I look at the blog and think: &amp;ldquo;Hm, this is kinda ugly.&amp;rdquo; Then, I have to rewrite it until I&amp;rsquo;m mostly satisfied with how it looks.
Recently, I&amp;rsquo;ve been working on writing a nice little interface for handling menus and other parts of the UI for my roguelike project. Unfortunately, like the layout of this blog, I can&amp;rsquo;t seem to find a satisfactory &amp;lsquo;look and feel&amp;rsquo; - I think I&amp;rsquo;ve got a good start though.
While procrastinating working on that, I&amp;rsquo;ve spent a lot of time thinking about the map, and my ECS system. At the risk of prematurely optimizing code, it seems like an awful waste of space to make every tile an entity. Most of a tiles properties are simple boolean flags anyways, so why not make tiles just a bitflag and glyph to represent them? After running some halfassed tests on this idea, the size of an entire map (100x100, or 10,000 tiles) worth of tiles was a mere 24 bytes. Yeah, this idea will work just fine.
Basically, how it works now is a tile is just: struct Tile { int bitMask; char glyph; } 
And the flags: enum TileFlags : int { NONE = 0, BLOCKS_MOVEMENT = 0x001, BLOCKS_LIGHT = 0x002, UP_STAIR = 0x004, DOWN_STAIR = 0x008, DOOR = 0x010, FLOOR = 0x020 }; 
I&amp;rsquo;m a pretty huge fan of bitflags, mostly because it allows me to do all sorts of cool stuff. Say for instance we added a LIQUID flag to TileFlags - liquid blocks movement (our fearless adventurer never took swim lessons, apparently) but doesn&amp;rsquo;t block light, so the adventurer&amp;rsquo;s field of vision would see over the murky pool of whatever liquid.
But wait! It gets better, what if our adventurer decides that, while standing next to a murky pool of water, to read a Scroll of Explosion - The game logic can now easily test to see if any of the affected tiles are also liquid, and make steam that the player CAN&amp;rsquo;T see through!</description>
    </item>
    
    <item>
      <title>Commenting System with Staticman!</title>
      <link>/posts/2016-11-15-commenting-system/</link>
      <pubDate>Tue, 15 Nov 2016 19:18:06 -0700</pubDate>
      
      <guid>/posts/2016-11-15-commenting-system/</guid>
      <description>The one bad thing about hosting a static blog is that implementing comments means you:
 Outsource, letting some other site handle it (like Disqus) Come up with some sort of crazy contraption to force a comment system into a static blog Spend hours scouring the internet to see what other people have done.  Obviously, outsourcing wasn&amp;rsquo;t an option - Disqus looks nice and all, and I&amp;rsquo;m sure it would be fine for a lot of people, but it just wasn&amp;rsquo;t what I wanted. I like having full control of my data. My next idea was to find a free hosting site and write some crazy PHP and set up a SQL database to set up comments.
But this got me thinking - how did sites handle comments before all this dynamic content was commonplace? A careful google search led me to an amazing blog post by Eduardo Boucas on how he solved this exact problem. And holy crap does his solution work exactly like I wanted. In a quick nutshell: Staticman is a Github bot that pushes formatted yml (or json) files into a specified directory that can than be read as comments on the page when the site is built!
So how did I set this up in Jekyll? Read on!
Obviously, the first thing I did was read the documentation on the Staticman site, and followed the steps listed there. This is what was added to my _config.yml file for the site.
staticman: allowedFields: [&amp;#39;name&amp;#39;, &amp;#39;message&amp;#39;] branch: master filename: &amp;#39;entry{@timestamp}&amp;#39; format: yml generatedFields: date: type: date options: format: &amp;#34;timestamp-seconds&amp;#34; moderation: false path: &amp;#34;_data/comments/{options.slug}&amp;#34; requiredFields: [&amp;#39;name&amp;#39;, &amp;#39;message&amp;#39;] url: https://api.staticman.net/v1/entry/zwilder/Hack_Blog/master Now, since the blog is accessible from GitHub, and the repository is public - I removed the email field. I don&amp;rsquo;t think anyone would appreciate their email being so easily accessible (something something security). The important part of this is the path variable - this saves comments in their own folder, named after the post they were generated from.
I added the comments into their very own partial HTML page in the _includes\ directory.
At the top of the comments.</description>
    </item>
    
    <item>
      <title>Partying With Jekyll</title>
      <link>/posts/2016-11-12-partying-with-jekyll/</link>
      <pubDate>Sat, 12 Nov 2016 18:15:06 -0700</pubDate>
      
      <guid>/posts/2016-11-12-partying-with-jekyll/</guid>
      <description>I&amp;rsquo;ve been wanting to fix this blog for a while now, and I decided in the process that I am awful at web design/programming. Haha, well, the first step to being kinda good at something is kinda sucking at something, right?
In my scouring of the internet I discovered that a lot of static blog sites used Jekyll to generate their site. At first, I figured it was nothing more than another insta-blog program where you just dump some content into a folder and it spits out a blog - but holy cow it is so much more than (and can be exactly) that. I&amp;rsquo;ve only scratched the surface of what it is capable of, since I don&amp;rsquo;t have many skills in the web developement category (yet).
I originally attempted to create my own Jekyll theme - and successfully recreated my original blog format. Unfortunately, I remembered (after spending a good deal of time working on it) that I didn&amp;rsquo;t really like the look/feel of my original blog - and trashed it. The next attempt was to find and use another, premade, theme. I wasn&amp;rsquo;t really a fan of that route from the start, but I tried a few different ones - and tweaked them to my liking. The blog still didn&amp;rsquo;t look/feel quite right, and didn&amp;rsquo;t really seem to work well with posts that are largely text/code.
The last theme I tried was based on hack.css. It was kinda neat looking, but still felt a little cluttered to me. After discovering what hack.css originally was, I decided that it wouldn&amp;rsquo;t be too difficult to create my own &amp;ldquo;theme&amp;rdquo; based off the framework hack.css provided. The result is what you have in front of you.
Yeah, a few things still need tweaking - I&amp;rsquo;m not super happy with the way code blocks look for large sections of code&amp;hellip; IE this looks fine:
#include &amp;lt;iostream&amp;gt;int main(int argc, char * argv[]) { std::cout &amp;lt;&amp;lt; &amp;#34;Hello Jekyll!\n&amp;#34;; return 0; }  However, looking at my previous [post]({{ site.baseurl }}/2016/07/15/fun-with-dijkstra-mapping.html)&amp;hellip; the large chunks of code posted there look atrocious. Ah well, it&amp;rsquo;s fun to tweak things and beat them into looking like a real website.</description>
    </item>
    
    <item>
      <title>Fun With Dijkstra Mapping</title>
      <link>/posts/2016-07-15-fun-with-dijkstra-mapping/</link>
      <pubDate>Fri, 15 Jul 2016 08:29:06 -0700</pubDate>
      
      <guid>/posts/2016-07-15-fun-with-dijkstra-mapping/</guid>
      <description>Continuing in my never-ending project to make a &amp;ldquo;simple&amp;rdquo; roguelike in C++, I decided to tackle something I have never before tried: artificial intelligence. My first rough idea was to implement some sort of component-type system, and build the AI up like I built up entities. This turned out to be far too complicated, and even getting a monster to move randomly was a chore. Obviously, this wasn&amp;rsquo;t going to work.
After browsing /r/roguelikedev and RogueBasin I came across a few articles on &amp;ldquo;need driven AI&amp;rdquo; - an absurdly cool concept, and so (seemingly) simple to implement I wasn&amp;rsquo;t sure how I didn&amp;rsquo;t stumble across this earlier. Basically, creatures in the game assign a value to things they know about (treasure, the player, exits, other monsters they are friendly with, other monsters they are terrified of, etc. etc.) and make an &amp;lsquo;informed&amp;rsquo; decision about where to move next. A monster could desire killing the player over treasure, and would &amp;ldquo;decide&amp;rdquo; to move towards the player instead of a closer pile of gold. Maybe that monster is a pack hunter, and also strongly desires to be near it&amp;rsquo;s pack - so when singled out it moves away to regroup with others. Cats could hunt mice, the undead could wander aimlessly attacking anything, golems could guard exits, archers could stay a safe distance away, and
&amp;hellip;
Clearly, this idea has so many uses that I absolutely had to attempt an implementation in my game. The best article I found describing what I hope to accomplish was written by the creator of the awesome Brogue, and talked about something called &amp;ldquo;Dijkstra mapping.&amp;rdquo; A number on a Dijkstra map is the shortest distance from that tile to the goal. Moving from any numbered tile to any lower numbered tile adjacent will take you on the shortest path to the goal. Using this technique I could also accomplish intelligent pathfinding (another thing I&amp;rsquo;ve never been quite able to do on my own). So,	the first step was to write up something to generate these maps.
After much confusion (I&amp;rsquo;m still not much of a C++ programmer), I ended up with a fairly simple and straightforward set of code to generate a vector of integers representing a Dijkstra map from the vector of integers representing a normal dungeon map.</description>
    </item>
    
  </channel>
</rss>