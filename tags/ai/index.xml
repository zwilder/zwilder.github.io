<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AI on Wsl Blog</title>
    <link>/tags/ai/</link>
    <description>Recent content in AI on Wsl Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 15 Jul 2016 08:29:06 -0700</lastBuildDate>
    
	<atom:link href="/tags/ai/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Fun With Dijkstra Mapping</title>
      <link>/posts/2016-07-15-fun-with-dijkstra-mapping/</link>
      <pubDate>Fri, 15 Jul 2016 08:29:06 -0700</pubDate>
      
      <guid>/posts/2016-07-15-fun-with-dijkstra-mapping/</guid>
      <description>Continuing in my never-ending project to make a &amp;ldquo;simple&amp;rdquo; roguelike in C++, I decided to tackle something I have never before tried: artificial intelligence. My first rough idea was to implement some sort of component-type system, and build the AI up like I built up entities. This turned out to be far too complicated, and even getting a monster to move randomly was a chore. Obviously, this wasn&amp;rsquo;t going to work.
After browsing /r/roguelikedev and RogueBasin I came across a few articles on &amp;ldquo;need driven AI&amp;rdquo; - an absurdly cool concept, and so (seemingly) simple to implement I wasn&amp;rsquo;t sure how I didn&amp;rsquo;t stumble across this earlier. Basically, creatures in the game assign a value to things they know about (treasure, the player, exits, other monsters they are friendly with, other monsters they are terrified of, etc. etc.) and make an &amp;lsquo;informed&amp;rsquo; decision about where to move next. A monster could desire killing the player over treasure, and would &amp;ldquo;decide&amp;rdquo; to move towards the player instead of a closer pile of gold.</description>
    </item>
    
  </channel>
</rss>