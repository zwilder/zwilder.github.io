<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Procedural Generation on Wsl Blog</title>
    <link>/tags/procedural-generation/</link>
    <description>Recent content in Procedural Generation on Wsl Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 17 Nov 2023 11:00:00 -0700</lastBuildDate>
    
	<atom:link href="/tags/procedural-generation/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Markov Chain Word Generator</title>
      <link>/posts/2023-11-17-markov/</link>
      <pubDate>Fri, 17 Nov 2023 11:00:00 -0700</pubDate>
      
      <guid>/posts/2023-11-17-markov/</guid>
      <description>The first screen the player sees in Goblin Caves is a black screen with a question and a prompt.
    This &amp;ldquo;new player&amp;rdquo; screen was originally made as a &amp;ldquo;quick and dirty&amp;rdquo; sort of thing, with the intention of replacing it with something fancier - or at least more flashy. It&amp;rsquo;s really grown on me since I originally wrote it, and I don&amp;rsquo;t think I&amp;rsquo;m going to change it. What does still bother me though, is that if you just hit enter without putting down something a little message box pops up, asking you to &amp;ldquo;Please try again.&amp;rdquo;
    That&amp;rsquo;s kinda lame, and directly above the code that does that error checking (was) a comment I wrote to myself: &amp;ldquo;It would be super cool if this was replaced with a call to a random name generator&amp;hellip;&amp;rdquo;
Well I came across that comment while rewriting all the drawing and input handling code, and decided that was going to be my next project.
Random words are typically not just random characters slapped together - that would just give words like:
 alxvik hhbatxr orikumo kxzzmk cafzrx jkiuvfm
 Not very satisfying, right? Are those names? Places? Plants? Weapons? Who knows. To get more satisfying words, a better approach is to use a Markov Chain - what Wikipedia defines cryptically as &amp;ldquo;a stochastic model describing a sequence of possible events in which the probability of each event depends only on the state attained in the previous event.&amp;rdquo;
That&amp;rsquo;s just a bunch of fancy words to say (in this context) that if you start with a sequence of letters, which next letter is most likely to occur?
If you know those probabilities, word generation becomes easy - start with a few letters, figure out what letter could come next, choose one of those letters and start the process over with that letter and the preceding letters. With any dataset input, the words that would be generated following these probabilities would (should) be very similar to the input. I could even take multiple datasets, generate some words, handpick words I like for another dataset, and then generate a whole bunch of words similar to the ones I like!</description>
    </item>
    
    <item>
      <title>Gradients for Colors, and Actions for Actors</title>
      <link>/posts/2017-01-07-gradients-and-actions/</link>
      <pubDate>Sat, 07 Jan 2017 11:45:00 -0700</pubDate>
      
      <guid>/posts/2017-01-07-gradients-and-actions/</guid>
      <description>Over the past couple of weeks I&amp;rsquo;ve been working on simplifying the code for my roguelike project - heavily inspired by one of my favorite books on my shelf, Game Programming Patterns.
I&amp;rsquo;ve seriously read this book cover to cover, multiple times - and every time find a new use for one of the &amp;lsquo;patterns&amp;rsquo; in it. I just discovered that the author&amp;rsquo;s blog has a bunch of good reads on it as well. One of the biggest problems I&amp;rsquo;ve had with the roguelike project was a simple way to issue commands (which should have been a clue) from the player to the character, and from the computer AI to the enemies.
The first chapter in the book, and this blog post had the answer - the &amp;lsquo;Command&amp;rsquo; pattern. I have no idea how I didn&amp;rsquo;t think of this sooner - basically, all the actions that an actor (player or enemy) can take are issued as &amp;lsquo;commands&amp;rsquo;. A command is just a subclass of an action, and each actor when updating gets to call it&amp;rsquo;s most current action&amp;rsquo;s perform() routine. What makes this super cool and useful is that the perform routine returns an ActionResult, which has a flag stating whether or not the current action was successful, and a suggested alternate action (for use if the action was unsuccessful).
class Action { public: virtual ActionResult perform(Actor &amp;amp; actor) = 0; protected: Action() { } }; class ActionResult { public: ActionResult() { status_ = true; } bool success() { return status_; } void setFalse() { status_ = false; } void setTrue() { status_ = true; } Action * getAlternate() { return alternative_; } void setAlternate(Action * alternate) { alternative_ = alternate; } private: Action * alternative_; bool status_; };  Now, if the player moves into a square - instead of the keypress moving the player, the keypress just sets the player&amp;rsquo;s next action to attack in the direction of that tile. During the players update, the perform() for the attack action checks to see if there is another actor there - and if there isn&amp;rsquo;t returns a move action as an alternate.</description>
    </item>
    
    <item>
      <title>Randomly Generated Caves with Cellular Automata</title>
      <link>/posts/2016-12-20-automata-caves/</link>
      <pubDate>Thu, 22 Dec 2016 19:18:06 -0700</pubDate>
      
      <guid>/posts/2016-12-20-automata-caves/</guid>
      <description>So, every time I get the urge to write a blog post about whatever random bit of code I&amp;rsquo;m writing - I look at the blog and think: &amp;ldquo;Hm, this is kinda ugly.&amp;rdquo; Then, I have to rewrite it until I&amp;rsquo;m mostly satisfied with how it looks.
Recently, I&amp;rsquo;ve been working on writing a nice little interface for handling menus and other parts of the UI for my roguelike project. Unfortunately, like the layout of this blog, I can&amp;rsquo;t seem to find a satisfactory &amp;lsquo;look and feel&amp;rsquo; - I think I&amp;rsquo;ve got a good start though.
While procrastinating working on that, I&amp;rsquo;ve spent a lot of time thinking about the map, and my ECS system. At the risk of prematurely optimizing code, it seems like an awful waste of space to make every tile an entity. Most of a tiles properties are simple boolean flags anyways, so why not make tiles just a bitflag and glyph to represent them? After running some halfassed tests on this idea, the size of an entire map (100x100, or 10,000 tiles) worth of tiles was a mere 24 bytes. Yeah, this idea will work just fine.
Basically, how it works now is a tile is just: struct Tile { int bitMask; char glyph; } 
And the flags: enum TileFlags : int { NONE = 0, BLOCKS_MOVEMENT = 0x001, BLOCKS_LIGHT = 0x002, UP_STAIR = 0x004, DOWN_STAIR = 0x008, DOOR = 0x010, FLOOR = 0x020 }; 
I&amp;rsquo;m a pretty huge fan of bitflags, mostly because it allows me to do all sorts of cool stuff. Say for instance we added a LIQUID flag to TileFlags - liquid blocks movement (our fearless adventurer never took swim lessons, apparently) but doesn&amp;rsquo;t block light, so the adventurer&amp;rsquo;s field of vision would see over the murky pool of whatever liquid.
But wait! It gets better, what if our adventurer decides that, while standing next to a murky pool of water, to read a Scroll of Explosion - The game logic can now easily test to see if any of the affected tiles are also liquid, and make steam that the player CAN&amp;rsquo;T see through!</description>
    </item>
    
  </channel>
</rss>